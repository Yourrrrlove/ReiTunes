@page "/"

@using ReiTunes.Core
@using Utils
@using BlazorContextMenu
@inject Library MusicLibrary
@inject LibrarySettings Settings
@inject IJSRuntime JS

<ContextMenu Id="myMenu" CssClass="bg-black text-blue-600">
    <Item OnClick="@DeleteBookmark">üöÆÔ∏è Delete</Item>
</ContextMenu>

@if(_currItem is not null) {
    <h2 class="text-center text-solarized-base01 dark:text-solarized-base2">
        @Emoji.Blingify($"{_currItem.Name} - {_currItem.Artist}")
    </h2>
    <div>
        <span>Bookmarks:</span>
        @foreach (var bookmark in _currItem.Bookmarks.OrderBy(b => b.Position)) {
            <ContextMenuTrigger MenuId="myMenu" CssClass="inline">
                <button class="mx-1 px-1 border border-solarized-blue rounded
                dark:bg-solarized-base02 hover:bg-solarized-base2 dark:hover:bg-solarized-base03"
                onclick="function setPosition(){document.getElementById('player').currentTime = @bookmark.Position.TotalSeconds};setPosition()">
                    @bookmark.Position.ToString("hh\\:mm\\:ss")
                </button>
            </ContextMenuTrigger>
        }
    </div>
}

<div class="flex items-center mt-2 mb-2">
<audio id="player" controls src="@_audioUri" autoplay="true" class="w-full"
    currentTime="@_currentTime">
    Your browser does not support the<code>audio</code> element.
</audio>
<button class="ml-2 px-1 border border-solarized-blue rounded whitespace-nowrap
    dark:bg-solarized-base02 hover:bg-solarized-base2 dark:hover:bg-solarized-base03"
    @onclick="AddBookmark">
    Add Bookmark
</button>
</div>

<div class="flex max-w-fit justify-center align-center text-blue-300 space-x-2 border border-blue-300 rounded px-1 mb-2">
    <button class="text-4xl font-bold hover:text-blue-500" @onclick="() => {MinBookmarksToShow--;}">-</button>
    <ruby class="text-2xl font-serif">@MinBookmarksToShow<rt>Min üîñÔ∏è</rt></ruby>
    <button class="text-4xl font-bold hover:text-blue-500" @onclick="() => {MinBookmarksToShow++;}">+</button>
</div>

<div class="@(_showStatus ? "" : "hidden")">
    <div>@_status</div>
    <progress class="w-full" value=@_statusProgress max=100></progress>
</div>

<input
@bind="SearchFilter"
@bind:event="oninput"
autofocus
placeholder="Find (ctrl+F)"
class="w-full mb-2 px-2 bg-solarized-base3 dark:bg-solarized-base02 border-2 border-solarized-base01 rounded" />

<table class="w-full">
    <thead>
        <tr>
            <th class="text-left">Name</th>
            <th class="text-left">Artist</th>
            <th class="text-left">Plays</th>
            <th class="text-left">Bookmarks</th>
            <th class="text-left">Added</th>
        </tr>
    </thead>
    <tbody>
        @foreach (LibraryItem item in FilteredItems())
        {
            <tr @onclick="() => ItemClicked(item)">
                <td class="text-left">@item.Name</td>
                <td class="text-left">@item.Artist</td>
                <td class="text-left">@item.PlayCount</td>
                <td class="text-left">@item.Bookmarks.Count()</td>
                <td class="text-left">@item.CreatedTimeUtc</td>
            </tr>
        }
    </tbody>
</table>

@code {

    private readonly Uri _cloudBaseUri = new Uri("https://reitunes.blob.core.windows.net/music/");

    private string _title = "üé∂üéµ Welcome to ReiTunes üéµüé∂";
    private string _audioUri = "";

    private LibraryItem? _currItem;
    // in seconds
    private int _currentTime = 0;

    private bool _showStatus = false;
    private string _status = "";

    private int _statusProgress = 0;

    private string _searchFilter = "";

    private int MinBookmarksToShow{ get; set; } = 0;

    public string SearchFilter
    {
        get { return _searchFilter; }
        set {
            _searchFilter = value;
            StateHasChanged();
        }
    }


    private void HideStatus()
    {
        _showStatus = false;
        _status = "";
        _statusProgress = 0;
    }

    private void ShowStatus(string status)
    {
        _showStatus = true;
        _status = status;
        _statusProgress = 0;
    }

    private string GetTooltip(LibraryItem item) => $"Artist: {item.Artist}\nPlays: {item.PlayCount}";

    private IEnumerable<LibraryItem> FilteredItems()
    {
        return MusicLibrary.Items.Where(i => i.AllSearchProperties.Contains(_searchFilter, StringComparison.OrdinalIgnoreCase))
        .Where(i => i.Bookmarks.Count >= MinBookmarksToShow)
        .OrderByDescending(i => i.CreatedTimeUtc);
    }

    private async Task AddBookmark() {
        Console.WriteLine($"Adding bookmark for {_currItem?.Name}");

        try {
            var elapsedSeconds = await JS.InvokeAsync<double>("getCurrentTime");
            Console.WriteLine($"Current time: {elapsedSeconds}s");
            _currItem?.AddBookmark(TimeSpan.FromSeconds(elapsedSeconds));
        } catch (Exception ex) {
            Console.WriteLine($"Error adding bookmark: {ex}");
        }
    }

    private async Task ItemClicked(LibraryItem item)
    {
        Console.WriteLine($"Click handler for {item.Name}");

        var expectedPath = Path.Combine(Settings.MusicFileLocation, item.FilePath);

        if (!File.Exists(expectedPath))
        {
            var downloadFileUrl = new Uri(_cloudBaseUri, item.FilePath).ToString();

            ShowStatus($"Downloading {item.Name}...");

            Console.WriteLine($"Downloading {item.Name} from {downloadFileUrl}");

            using var client = new HttpClientDownloadWithProgress(downloadFileUrl, expectedPath);
            client.ProgressChanged += (totalFileSize, totalBytesDownloaded, progressPercentage) =>
            {
                int rounded = (int) (progressPercentage ?? 0);
                if (_statusProgress != rounded)
                {
                    _statusProgress = rounded;
                    StateHasChanged();
                    Console.WriteLine($"{progressPercentage}% ({totalBytesDownloaded}/{totalFileSize} B)");
                }
            };

            await client.Download();
            Console.WriteLine($"Downloaded file to {expectedPath}");

            HideStatus();
        }

        _currItem = item;
        _audioUri = $"musiclibrary/{item.FilePath}";
    }

    void DeleteBookmark(BlazorContextMenu.ItemClickEventArgs e)
    {
        Console.WriteLine($"Not implemented: Delete bookmark for {_currItem?.Name}");
        Console.WriteLine($"Item Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId}, IsCanceled: {e.IsCanceled}, MenuItem: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}");
    }
}
